defaultTasks 'build'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
    scriptFile = "generated-gradlew"
}

allprojects {
    ext.projectName = 'mapfish-print'
    group = 'org.mapfish.print'
    version = '3.0-SNAPSHOT'
    ext.junitVersion = "4.11"
    ext.springVersion = "3.2.8.RELEASE"
    ext.jasperReportVersion = "5.5.0"
    ext."signing.keyId" = signing_keyId
    ext."signing.secretKeyRingFile" = signing_secretKeyRingFile
    ext."signing.password" = signing_password
}

configure(subprojects.findAll {['core', 'examples'].contains(it.name)}) {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: 'checkstyle'

    jar.dependsOn(checkstyleMain, findbugsMain)

    repositories {
        mavenLocal()
        mavenCentral()
        maven {url "http://dev.mapfish.org/maven/repository"}
        maven {url "http://download.osgeo.org/webdav/geotools"}
    }
    checkstyle {
        configFile = file("$rootProject.rootDir/checkstyle_checks.xml")
        configProperties = ['basedir': project.rootDir.path]
        ignoreFailures = false
        reportsDir = file("$project.buildDir/reports/checkstyleReports")
    }
    checkstyleTest.enabled = false

    findbugs {
        toolVersion = "2.0.3"
        ignoreFailures = false
        reportsDir = file("$project.buildDir/reports/findbugsReports")
        effort = "max"
        reportLevel = "high"
        excludeFilter = file("$rootProject.projectDir/findbugs-exclude.xml")
    }
    findbugsTest.enabled = false

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    compileJava.options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']

    dependencies {
        testCompile (
                "junit:junit:${project.junitVersion}",
                'org.mockito:mockito-core:1.9.5',
                "org.springframework:spring-test:${springVersion}"
        )

    }

    sourceSets {
        test {
            output.resourcesDir = output.classesDir
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "utf-8"
    }
    tasks.withType(Javadoc) {
        options.encoding = "utf-8"
    }

}

