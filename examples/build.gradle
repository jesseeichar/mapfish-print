import org.gradle.internal.jvm.Jvm

repositories {
    maven {url "http://repo.boundlessgeo.com/main"}
    maven {url "http://maven.restlet.org"}
}
def jettySrc = "$projectDir/release/jetty"
def jettyOut = "$buildDir/jetty"
def geoserverDir = "$jettyOut/webapps/geoserver"
def geoserverDataDir = geoserverDir+"/data"
def coreWar = project(":core").tasks['war']


dependencies {
    testCompile(project(':core'))
}

task copyJetty (type: Copy) {
    description "Copy Jetty and GeoServer into a directory that we can zip as a distribution bundle or use for jettyRun"

    from fileTree(jettySrc)
//        from "$projectDir/RUN_SERVER_README.TXT"
    exclude "README.TXT"
    exclude ("webapps/geoserver/WEB-INF/web.xml")
    exclude ("webapps/geoserver/data/logging.xml")
    exclude ("webapps/geoserver/**/*.qix")
    into (jettyOut)
}

task copyGeoserverFiles (type: Copy) {
    description "Customize Geoserver with files from src/main/webapp"
    dependsOn copyJetty
    
    from fileTree("src/main/webapp")
    into geoserverDir
}

task addGeoserverLoggingFile {
    description "Configure Geoserver logging to make it silent"
    dependsOn copyJetty

    doLast {
        logger.lifecycle("Writing an updated Geoserver log configuration to suppress geoserver output")

        def offLoggingConfig = new File(geoserverDataDir, "logs/OFF_LOGGING.properties")
        offLoggingConfig.parentFile.mkdirs()
        def loggingXml = new File(geoserverDataDir, "logging.xml")
        loggingXml.parentFile.mkdirs()

        loggingXml.withWriter "UTF-8", { writer ->
            def builder = new groovy.xml.MarkupBuilder(writer)
            builder.logging {
                level "OFF_LOGGING.properties"
                location "${geoserverDir}/geoserver.log"
                stdOutLogging "false"
            }
        }
        offLoggingConfig.setText("log4j.debug=FALSE\nlog4j.rootLogger=OFF", "UTF-8")
    }
}

task copyMapfishPrint (type: Copy) {
    description "Copy Mapfish print webapp into the jetty that we will use as a distribution bundle and jettyRun"
    dependsOn coreWar, copyJetty

    from zipTree(coreWar.archivePath)
    into ("$jettyOut/webapps/mapfish-print")
}


task buildServer {
    dependsOn copyGeoserverFiles, copyMapfishPrint, addGeoserverLoggingFile
}

task buildZip(type: Zip) {
    dependsOn buildServer
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    destinationDir = file("$buildDir/dists")
    baseName = project.projectName
    version = project.version
    def folder = "$baseName-$version"
    into (folder) {
        from "$jettyOut"
    }
}

build.dependsOn buildZip

task jettyRun (type: JavaExec) {
    dependsOn tasks['buildServer']

    description 'Start the Geoserver Test Server in foreground mode for running local tests'
    classpath "$jettySrc/start.jar"
    workingDir jettyOut
    main = "org.eclipse.jetty.start.Main"
    maxHeapSize = "512M"
    jvmArgs "-XX:MaxPermSize=256M"


    def debug = System.getProperty("debugJetty")
    def debugPort = System.getProperty("debugJettyPort")
    if (debugPort != null) {
        debug = "true"
    } else {
        debugPort = 5005
    }

    if ("true" == debug || "" == debug) {
        jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debugPort"
    }
}

test {
    dependsOn ':core:compileJava', 'testClasses'
    description 'Runs all automated e2e (integration) tests.'
    maxParallelForks = Runtime.getRuntime().availableProcessors();

    java.lang.Process process = null
    doFirst {
        def cmd = [jettyRun.executable]
        cmd.addAll(jettyRun.allJvmArgs)
        cmd.addAll(jettyRun.main)
//        process = cmd.execute()
        def builder = new ProcessBuilder(cmd)
        builder.directory(jettyRun.workingDir)

        logger.lifecycle("Starting test server: " + cmd.join(" ") + " in directory: " + jettyRun.workingDir)
        process = builder.start()
        process.consumeProcessOutput(System.out, System.err)
        addShutdownHook {
            if (process != null) {
                process.destroy();
            }
        }

        def mapfishPrint = new URL("http://localhost:8080/mapfish-print/print/capabilities.json")
        def geoserver = new URL("http://localhost:8080/web/")
        def isRunning = { url ->
            def HttpURLConnection connection = null
            try {
                connection = url.openConnection();
                connection.connect()
                if (connection.responseCode == 200) {
                    return true
                }
            } catch (IOException e) {
                // continue
            } finally {
                if (connection != null) {
                    connection.disconnect()
                }
            }

            return false
        }
        def startTime = System.currentTimeMillis();
        def timeSinceLastUpdate = System.currentTimeMillis()
        while (!isRunning(mapfishPrint) && !isRunning(geoserver)) {
            def elapsed = System.currentTimeMillis() - timeSinceLastUpdate

            if (System.currentTimeMillis() - startTime > 120000) {
                logger.lifecycle("Failed to start server after waiting 2 minutes, try running ./gradlew :examples:jettyRun to debug");
                return;
}
            if (elapsed > 5000) {
                timeSinceLastUpdate = System.currentTimeMillis()
                logger.info("Test Server still starting...")
            }
            Thread.sleep(500)
        }
        logger.lifecycle("Test server started")
    }

    doLast {
        logger.lifecycle("Shutting test server")
        process.destroy()
        process.in.close()
        process.out.close()
        process.err.close()
    }
}
